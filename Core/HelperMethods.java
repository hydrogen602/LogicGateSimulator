package Core;

import Packing.DataPack;
import Packing.WirePack;
import Parts.*;
import Wires.Wire;

/**
 * Collection of static methods for loading and unloading parts and wires
 * 
 * @author Jonathan
 */
public class HelperMethods 
{
	private HelperMethods() {}

	/**
	 * Takes the Parts and Wires currently active and turns their data into text for saving 
	 * into a file.
	 * 
	 * @param panel The GUI instance running everything
	 * @return A String that can be written to a file and from which the parts and wires can
	 * be reconstructed
	 */
	public static String packUp(GUI panel)
	{
		String data = "";

		for (Switch s: panel.switchList)
			data += s.persistent();

		for (BasicPart p: panel.partsList)
			data += p.persistent();

		//System.out.println(data);
		return data;
	}

	/**
	 * Used to reconstruct all parts from a String
	 * @param panel The instance of the GUI class
	 * @param data The String generated by {@code packUp}
	 */
	public static void reconstruct(GUI panel, String data)
	{
		DataPack[] pack = HelperMethods.unpack(data);
		panel.resetSomeVars();
		panel.switchList.clear();
		panel.partsList.clear();

		BasicPart tmp = null;
		Switch tmpS = null;;

		for (int i = 0; i < pack.length; i++)
		{
			// TODO organize this
			if (pack[i].class_.equals("SWITCH"))
			{
				tmpS = new Switch(0, 0, pack[i].key);
				tmpS.reconstruct(pack[i].inputs, pack[i].outputs, pack[i].x, pack[i].y, pack[i].isMenu, pack[i].myID);
				panel.switchList.add(tmpS);
			}
			else
			{
				tmp = generateObject(pack[i].class_);
				if (tmp == null)
					throw new IllegalArgumentException("reconstruct found unknown part: " + pack[i].class_);
				
				tmp.reconstruct(pack[i].inputs, pack[i].outputs, pack[i].x, pack[i].y, pack[i].isMenu, pack[i].myID);
				panel.partsList.add(tmp);
			}
			
			//System.out.println(pack[i].outputWires.length);
		}
		
		/*
		 * For new parts
		 */
		
		if (!data.contains("class=XOR"))
		{
			tmp = generateObject("XOR");
			panel.partsList.add(tmp);
		}

		WirePack p;
		int ID;
		BasePart outputPart;
		for (int i = 0; i < pack.length; i++)
		{
			for (int j = 0; j < pack[i].outputWires.length; j++)
			{
				if (pack[i].outputWires[j] == null)
					continue;
				
				ID = pack[i].myID;
				p = pack[i].outputWires[j];
				/*
				 * Output part should be ... idk
				 */
				
				//System.out.println("$");
				//System.out.println(pack[i]);
				outputPart = findPart(ID, panel);
				//System.out.println(outputPart.getID()+", "+outputPart.toString());
				
				//Wire w = new Wire(outputPart, j);
				Wire w = outputPart.setOutputWireReconstruct(j);
				w.reconstruct(p.x1, p.y1, p.x2, p.y2, p.state, p.myID, findPart(p.inputID, panel), p.inputNum);
				w.passRef();
			}
		}
	}
	
	/**
	 * Tries to take the string from a BasicPart subclass toString() method
	 * and makes a new instance of that class
	 * 
	 * @param s The result of the BasicPart subclass toString() method
	 * @return A new BasicPart
	 */
	public static BasicPart generateObject(String s)
	{	
		if (s.equals("SWITCH"))
		{
			return null;
			//return new Switch(10, 10, ' ');
		}
		else if (s.equals("DISPLAY"))
		{
			return new Display(70, 10);
		}
		else if (s.equals("AND"))
		{
			return new And(130, 10);
		}
		else if (s.equals("OR"))
		{
			return new Or(190, 10);
		}
		else if (s.equals("NOT"))
		{
			return new Not(250, 10);
		}
		else if (s.equals("SPLIT"))
		{
			return new Split(310, 10);
		}
		else if (s.equals("GATEDLATCH"))
		{
			return new GatedLatch(370, 10);
		}
		else if (s.equals("XOR"))
		{
			return new Xor(430, 10);
		}
		
		return null;
	}
	
	/**
	 * Searches the active parts of the GUI instance for certain ID number
	 * 
	 * @param ID Unique ID number to look for
	 * @param panel Instance of GUI class running everything
	 * @return The BasePart with the ID, or null
	 */
	private static BasePart findPart(int ID, GUI panel)
	{
		for (BasePart p: panel.switchList)
		{
			if (p.getID() == ID)
				return p;
		}
		
		for (BasePart p: panel.partsList)
		{
			if (p.getID() == ID)
				return p;
		}
		return null;
	}

	/**
	 * Tries to extract information from a string generated by {@code packUp}
	 * 
	 * @param data
	 * @return An Array of DataPack objects which contain the data extracted
	 */
	private static DataPack[] unpack(String data)
	{
		data = data.trim() + "\n";
		String[] packs = data.split("}\n");

		DataPack[] moreData = new DataPack[packs.length];

		for (int i = 0; i < packs.length; i++)
		{
			packs[i] = packs[i].substring(2).trim();

			moreData[i] = new DataPack(packs[i].split("\n"));
		}
		packs = null;

		//for (DataPack p: moreData)
		//	System.out.println(p.inputs.length);

		return moreData;
	}
}
